#+TITLE: INF1010 - Eksamensnotaterx
#+AUTHOR: Eivind, Sjur, Annabelle, Martin & Mats
#+STARTUP: indent
#+LATEX_HEADER: \documentclass[a4paper,norsk,10pt]{article}
#+LATEX_HEADER: \usepackage{fullpage} %Utnytter større del av arket.
#+LATEX_HEADER: \usepackage[sc,osf]{mathpazo} %Pen font.
#+LATEX_HEADER: \usepackage[norsk]{babel} %Norsk språkpakke.
#+LATEX_HEADER: \usepackage{hyperref} %For lenker i latex-dokument.
#+LATEX_HEADER: \hypersetup{colorlinks=true,linkcolor=black} %Farge på lenker.
#+LATEX_HEADER: \usepackage{amsmath} %Større matematikkpakke.
#+LATEX_HEADER: \usepackage[usenames,dvipsnames]{color} %Flere farger.
#+LATEX_HEADER: \usepackage{parskip} %Norsk type linjeskift.
* Tall

  |--------+---------------------------------------|
  | *Type* | *Lovlige verdier*                     |
  |--------+---------------------------------------|
  | byte   | -+127                                 |
  |--------+---------------------------------------|
  | short  | -+32 767                              |
  |--------+---------------------------------------|
  | int    | -+2 147 483 647                       |
  |--------+---------------------------------------|
  | long   | -+9 223 372 036 854 775 807L          |
  |--------+---------------------------------------|
  | float  | -+3.402 823 47 E+38F                  |
  |--------+---------------------------------------|
  | double | -+1.797 693 134 862 315 70 E+308      |
  |--------+---------------------------------------|

  negative tall er har alltid èn større range pga 0. 

** Integere

   Integere er heltall, og lite annet.
   Hvis vi vil konvertere en streng til en int sier vi:
   #+BEGIN_SRC java
     int x = Integer.parseInt("123");
   #+END_SRC
   Hvis vi vil konvertere(caste) et annet tall til int skriver vi:
   #+BEGIN_SRC java
   int x = (int) 3.14
   #+END_SRC

   |----------------+---------------------+---------------------|
   | Operasjon      | Beskrivelse         | Eksempel            |
   |----------------+---------------------+---------------------|
   | +, -, *, /     | De fire regneartene | 1+1                 |
   |----------------+---------------------+---------------------|
   | ++             | legge til 1         | i++                 |
   |----------------+---------------------+---------------------|
   | --             | trekke fra 1        | i--                 |
   |----------------+---------------------+---------------------|
   | %              | modulo(rest)        | 5%2 -> 1            |
   |----------------+---------------------+---------------------|
   | Math.sqrt(...) | Kvadratrot          | Math.sqrt(4) -> 2   |
   |----------------+---------------------+---------------------|
   | Math.pow(x, y) | Potens (x^y)        | Math.pow(2, 3) -> 8 |
   |----------------+---------------------+---------------------|
  
   
   - Metodekall
     - ++ og --
     - * og /
     - + og -
     - -(som negativt fortegn)

   husk at:
   #+BEGIN_SRC java
   int x, y=1;
   x = y++ + y + ++y;
   #+END_SRC
   nå er x = 6, fordi stykket blir 1 + 2 + 3. først er y = 1, og 
   så øker den slik at neste gang y brukes er den 2. 
   når vi skriver ++y så vil y være 3 før vi legger det til.

** desimaltall

   Jeg velger å bare leke med floats, men reglene er ca det samme som for int.

   konvertering fra heltall til desimaltall:
   #+BEGIN_SRC java
   float x = (3 + 0.0) / 2;
   #+END_SRC

   altså vi bare legger til 0.0 som det som skjer først, slik at ett av tallene er
   et desimaltall, ellers vil vi få heltallsdivisjon. Enkelt og greit,
   utenom det gjelder de samme operatorene og de samme presidensreglene.

* Sannhetsverdier (boolean)

  - &\&
    - Og 
    - true &\& true
   - || 
     - Eller
     - true || false
   -'!'
     - ikke
       b = !false
   - < og > 
     - mindre enn, større enn
     - b = x<y
   - <= og >= 
     - mindre eller lik       
     - b = x<=y
   - ==       
     - er lik
     - b = x==y
   - !=
     - er ikke lik
     - b = x!=y

** presidensregler

   - Metodekall
     - !
     - <, <=, >=, >
     - ==, !=
     - &\&
     - ||

* Tekst - Strenger og char

  vi har strengen s = "kake"
  
  |-----------------+--------------------------------+------------------------|
  | Navn            | Forklaring                     | Eksempel               |
  |-----------------+--------------------------------+------------------------|
  | charAt(...)     | tegnet i gitt posisjon(fra 0)  | s.charAt(2)=='k'       |
  |-----------------+--------------------------------+------------------------|
  | length()        | gir lengden på teksten         | s.length()==4          |
  |-----------------+--------------------------------+------------------------|
  | substring(...)  | delteksten fra- og tilposisjon | s.substring(1,3)=="ak" |
  |                 | gir indeksen og ut             | s.substring(1)=="ake"  |
  |-----------------+--------------------------------+------------------------|
  | equals(...)     | tester likhet mellom strenger  | s.equals("kake")       |
  |                 | (boolean)                      |                        |
  |-----------------+--------------------------------+------------------------|
  | indexOf(...)    | posisjonen til tegnet/tekst    | s.indexOf('a')==1      |
  |-----------------+--------------------------------+------------------------|
  | startsWith(...) | starter teksten med ... (bool) | s.startsWith("ka")     |
  |-----------------+--------------------------------+------------------------|
  | endsWith(...)   | ender teksten med ... (bool)   | s.endsWith("ke")       |
  |-----------------+--------------------------------+------------------------|
  | compareTo(...)  | sammenligning av tekster       | s.compareTo("bake")<0  |
  |-----------------+--------------------------------+------------------------|
  | toCharArray()   | gjør om strengen til et array  | s.toCharArray()        |
  |                 | av chars                       |                        |
  |-----------------+--------------------------------+------------------------|


** char

   en char-verdi er rett og slett en bokstav, den kan sammenlignes ('a' < 'b') 
   og vil da sammenlignes ut
   i fra ascii-verdier (alle store bokstaver er mindre enn de små bokstavene).
   og kan dermed i mange sammenhenger tenkes på som tall.
** String

   En string er en rekke med char-verdier, altså ord. Man kan legge ord
   sammen med pluss-opperatoren 
   ("heisann" + " " + navn), man kan konvertere tall til strenger på denne måten
   #+BEGIN_SRC java
   String s = "" + 42;
   #+END_SRC
   og verdien til s vil være "42".

   Strenger kan også deles opp i arrayer ved hjelp av en split-funksjon. eks:
   #+BEGIN_SRC java
   string[ ] t = s.split(" ");
   #+END_SRC
** Innlesing av tekst
for å lese fra terminal er det lettest å bruke en klasse som
finnes i og java.util.*;

Vi bruker også System.in

#+BEGIN_SRC java
import java.util.*;
Scanner tast = new Scanner(System.in);

String s = tast.nextLine();
#+END_SRC

Fra fil så trenger vi også noen klasser i java.io.*
'programmet' under leser fra en fil og over i terminalen linje for linje.

#+BEGIN_SRC java
import java.util.*;
import java.io.*;

Scanner f = new Scanner(new File(filnavn));

while (f.hasNextLine()){
  String inn = f.nextLine();
  System.out.println(inn);
}
#+END_SRC

* Arrayer

  Arrayer er en indeksert(fra 0) gruppe av objekter. Man må definere
  størelsen når man lager objektet.
  #+BEGIN_SRC java
  String[] a = new string[3];
  #+END_SRC
  man kan nå finne lengden på arrayet og bruke det som en int a.length;

  Man kan lage arrayer av alle mulige objekter.

** array-metoder
*** rask sortering
#+BEGIN_SRC java
import java.util.*;
char[] sorteres = "noesomskalsorteres".toCharArray();
Arrays.sort(sorteres);
for(int i = 0;i<sorteres.length;i++){
    System.out.print(sorteres[i]+" ");
}
#+END_SRC

Arrays er en klasse i java.util som kan sortere for oss "raskt og gæli"
bruker antagelig quicksort under panseret og funker med de fleste tall og 
chars.

* Løkker og kontrollstrukturer

  | *Navn*   | *Beskrivelse*                       | *Eksempel*                                     |
  | for      | bestemt antall ganger               | for(int i=0;i<3;i++)\{ \}                      |
  |          | alle objekter i array               | for(String s : a)\{ \}                         |
  |          | alle objekter i hash                | for(String s : hm.values())                    |
  | while    | i mens test er sann                 | while(b)\{ \}                                  |
  | do-while | utfører løkka før testen            | do \{ \} while(b);                             |
  | switch   | Hopper mellom kodeblokker ved input | switch(c){case a: <>; break; default: <>;}     |

** while
   
   while-løkker er kanskje den enkleste formen for løkker, den gjør en blokk kode
   så lenge predikatet i parameteret er sant. 

   Man trenger ikke nødvendigvis å kjøre
   en kodeblokk, for eksempel hvis man har en boolsk funksjon ("kan()") som parameteret
   kan man kjøre koden "while(kan());" og dermed si at man skal kjøre helt til "kan()"
   returnerer false.

** for
   
   for-løkker er en naturlig utvidelse av while da man ofte trenger tellere eller ting
   som skjer for hver gang kodeblokken skal kjøres, for eksempel en teller når man går
   igjennom et array.

   #+BEGIN_SRC java
   for(int i=0;i<array.length;i++;){
     System.out.println(array[i])
   }
   #+END_SRC

   Men for-løkker kan brukes på andre måter da den har en ganske enkel måte å oppføre 
   seg på "for(initialiseringskode;predikat;postkode)", eneste som det er strengt hva 
   man må ha i en for-løkke er predikatet. initialiseringen, kan være å sette en teller
   til noe, eller når man går igjennom noder i en graf, så kan man f.eks sette 
   src_java{for(Node n = root;n.next!=null;n=n.next)}

** while .. do
   
   Mindre brukt løkketype, egentlig en while-løkke hvor koden kjøres minst en gang før
   predikatet blir testet.
  
** switch

Ved bruk av if-setning kan man velge en av to muligheter ved at
setningen som evalueres er /true/ eller /false/. Med /switch/ kan man
velge mellom mange inputpåstander som er /integers/, /chars/ eller /enums/. 

#+BEGIN_SRC java
switch (<utrrykk>) {
    case verdi1: <settninger>; break;
    etc..
    default: <kjøres ved ingen treff ved <uttrykk> >;
}
#+END_SRC
* Hashmaps

  Hashmaps er en enkel måte å ordne mange objekter med et objekt som
  indeks.\\
  import java.util.*\\
  HashMap<string,Person> personregister = new HashMap<String,Person>();\\
  
  |-----------------------+---------------------------------------------|
  | Metode                | beskrivelse                                 |
  |-----------------------+---------------------------------------------|
  | put(nøkkel, peker)    | legge til objekt i HM                       |
  |-----------------------+---------------------------------------------|
  | get(nøkkel)           | hente peker til objekt                      |
  |-----------------------+---------------------------------------------|
  | remove(nøkkel)        | fjerne nøkkel fra HM                        |
  |-----------------------+---------------------------------------------|
  | containsKey(nøkkel)   | bool om nøkkelen er der                     |
  |-----------------------+---------------------------------------------|
  | containsValue(objekt) | bool om objektet er der                     |
  |-----------------------+---------------------------------------------|
  | values()              | lager en mengde av alle verdiene i HM,      |
  |                       | brukes til itterering                       |
  |-----------------------+---------------------------------------------|
  | keySet()              | brukes til å lage en mengde av alle nøklene |
  |                       | brukes til iterering                        |
  |-----------------------+---------------------------------------------|
  | isEmpty()             | returnerer true hvis tabellen er tom.       |
  |-----------------------+---------------------------------------------|
  | size()                | Metoden returnerer antall nøkler i tabellen |
  |-----------------------+---------------------------------------------|

Hashmaps
import java.util.*;

HashMap hashmapnavn = new HashMap();
hashmapnavn.put(nøkkel, verdi);

Hente: Bil b = (Bil) register.get(nøkkel);

Hente alle verdiene:
Iterator it = register.values().iterator();
while (it.hasNext()) {
    Bil b = (Bil) it.next();
}


containsKey(nøkkel) sjekker om objekt med nøkkelen finnes. Gir
true/false.
containsValue(verdi) sjekker om hashmap inneholder gitte objekt/verdi.
size() antall nøkler.

* UML

Diagrammer av programmene vårt.
Tegner selve strukturen til programmet.

-Objekdiagrammer. (UML-bokser med ev. variabler og argumenter etc.)
-Klassediagrammer. (bare koblingene etc.)

Tegner selve arkitekturen til programmet vårt. 

** Navneklassen

+public
-private
#protected
~package

Vi lager en modell av problemområdet vårt (også kalt domenemodell).
-Modell av probleme (og modell av databasen).

-Tegner streker mellom klassene. Og navn på forbindelsen.

Vi tegner hvor mange objekter det maksimalt kan være.

Vi har forskjellige skrivemåter for verdier:
1 - en
 * -  null, en eller flere
1..* - minst en
3,4,5 - tre fire eller fem

Tegner koblinger mellom de klassene du tenker programmet skal snakke
med.

Vi angir kun de mest sentrale dataene i UML-boksene.. F.eks. viktige
variabler og arrayer.
F.eks. :klasenavn [atributt-fekt (kan være tomt)].

-Pekere - piler

Tegner flere ved å legge en UML-boks som "skygge" bak.. En
representasjon for N antall.

* Lenkede lister
** Hva er en lenket liste?
En lenket liste er en liste med objekter refererer til neste, eller forrige objekt ved hjelp av pekere.

-Lenket liste. Trenger ikke ta stilling til antall fra start.
-Alle objekter er lenket til hverandre, eget objekt som peker på
-første objektet.
-Må søke i listen forfra for å finne objekter.


#+INCLUDE: "code/lenketeksempel.java" src java

Hvilke operasjoner trenger vi?
- Sette inn ny person
- Finne en person
- fjerne en person

#+INCLUDE: "code/lenketeksempel2.java" src java

** Innsettingsmetoder
*** LIFO
Innsetting først (LIFO):

#+INCLUDE: "code/lenketeksempel3.java" src java
*** FIFO
Innsetting sist (FIFO):

#+INCLUDE: "code/lenkeeksempel4.java" src java

*** Innsetting etter et bestemt objekt

#+INCLUDE: "code/lenkeeksempel5.java" src java

** Skrive ut en lenket liste

#+INCLUDE: "code/lenkeeksempel6.java" src java
* Rekursjon

Kaller seg selv.
Midlertidig data lagres i en såkalt Call Stack. Når metode kommer til
return statement går man "baklengs" tilbake i call stacken og metoden
fortsetter etter der den kalte seg selv.

Klassisk eksempel på en rekursjonsmetode er dette fakultetseksempelet.

#+INCLUDE: "code/rekurseksempel.java" src java

Dersom fact() blir kalt med tallet 1, vil den returnere 1, ellers vil den returnere produktet av fact(n-1)*n. Denne metoden rekurserer inntil n = 1.
Når en metode kaller seg selv, vil nye lokale variable og parametere lagres i stack, og koden utføres med disse nye variablene og parameterene fra starten aav. Den lagerr ikke kopi av metoden, kun argumenter/variabler.
** Hanois tårn
Hanois tårn er et ganske mye brukt problem som kan løses ved rekursjon.
Kort forklart så har du 3 pinner og en del skiver som er av forskjellige størrelser.
#+INLUDE: "code/hanois.java" src java



* Binære trær
** Sett inn i binærtre
Under følger et eksempel på en sett-inn-metode for binære
trær. Metoden ligger i klassen /BinaryTreeNode/, og vi antar at vi har
en metode som sammenligner verdiene til nodene, kalt /compareNodes/.

#+BEGIN_SRC java
void addNodeToBinaryTree(Node node) {
    if(compareNodes(node) <= 0) {
        if(right == null) {
            right = node;
        } else {
            right.addNodeToBinaryTree(node);
        }
    } else {
        if(right == null) {
            left = node;
        } else {
            left.addNodeToBinaryTree(node);
        } 
    }
}
#+END_SRC

** Traversering av treet
*** Preorder

*** Inorder
Hvis vi ønsker å traverse binærtreet i synkende rekkefølge bruker vi
/inorder traversal/.

#+BEGIN_SRC java
void printNodes() {
   if(left != null) {
       left.printNodes();
   }
   System.out.print(node.value);
   if (right != null) {
       right.printNodes();
   }
}
#+END_SRC

*** Postorder

* Søk
  hvis vi har sorterte data vil alltid binærsøk være den raskeste måten
  å søke på. Binærsøk så halverer vi antall muligheter for hver et eksempel
  fra den virkelige verden er hvis man skal gjette et tall mellom 1 og 1024
  og man har 10 gjetteforsøk, hvor man får vite om man gjettet for stort eller
  for lite, vil man alltid kunne finne tallet ved at man hele tiden halverer.

  eks: vi skal finne tallet (769)
  |-------------+-------+-----------------+--------| 
  | mulige tall | gjett | større / mindre | forsøk | 
  |-------------+-------+-----------------+--------| 
  |        1024 |   512 | større          |      1 | 
  |-------------+-------+-----------------+--------| 
  |         512 |   768 | større          |      2 | 
  |-------------+-------+-----------------+--------| 
  |         256 |   896 | mindre          |      3 | 
  |-------------+-------+-----------------+--------| 
  |         128 |   832 | mindre          |      4 | 
  |-------------+-------+-----------------+--------| 
  |          64 |   800 | mindre          |      5 | 
  |-------------+-------+-----------------+--------| 
  |          32 |   784 | mindre          |      6 | 
  |-------------+-------+-----------------+--------| 
  |          16 |   776 | mindre          |      7 | 
  |-------------+-------+-----------------+--------| 
  |           8 |   772 | mindre          |      8 | 
  |-------------+-------+-----------------+--------| 
  |           4 |   770 | mindre          |      9 | 
  |-------------+-------+-----------------+--------| 
  |           2 |   769 | riktig!         |     10 | 
  |-------------+-------+-----------------+--------| 

  ved usorterte mengder er det vanskeligere å gjøre strukturerte søk og det kan ofte
  være lurt å enten sortere det først, eller dele opp mengden i delmengder og søke hver
  del for seg selv.

** Eksempel på søking i usortert mengde med tråder

#+INCLUDE: "code/FinnMinst.java" src java
* Sortering
  Det er ofte en fordel å sortere store mengder data for å gjøre
  søking i i data effektivt om i det hele tatt mulig.

  Vi har gjennomgått flere forskjellige måter å sortere data på
  jeg vil her fokusere på følgende
  - innstikksortering
  - quicksort

** Innstikksortering
   veldig simpel sorteringsalgoritme som er effektiv på små mengder (i forhold til andre
   sorteringsalgoritmer), men taper mye når det er større mengder data som skal sorteres
   baserer seg på at man starter først i mengden og sorterer mens man itererer over mengden

#+INCLUDE: "code/instikksort.java" src java

** Quicksort

   Mer populær for mellomstore til store datamengder, den tar et objekt fra mengden og
   forterer listen etter hva som er større og mindre enn det objektet, deretter begynner
   den å sortere de to delene på samme måte rekursivt (dermed lettere å implementere
   tråder)

#+INCLUDE: "code/QSort.java" src java
** Sortering med tråder
Raskt eksempel med Quicksort som bruker tråder.

#+INCLUDE: "code/QSortTrad.java" src java
* Packages, interfaces, tilgangsnivåer og abstract
** Packages
Pakker er grupper med relaterte klasser, som hjelper deg med å 
organisere koden din. Klasser definert i en pakke, er kun tilgjengelig
via pakkenavnet. Med pakker har man også muligheten til å gjøre
klasser kun tilgjengelige fra innsiden av pakken, noe som kan gi økt
kontroll og sikkerhet. 

En annen stor fordel med pakker er at når du navngir en pakke,
opretter du et nytt /namespace/. Dette får man veldig bruk for når man
jobber på større prosjekter. To klasser i Java kan ikke ha samme navn,
for da får vi navnkollisjon. Men med namespaces løses dette. Det gjør
at vi kan ha to klasser med samme navn, men som ligger i forskjellige
pakker, eller namespaces, slik: /package01.CommonName.java/ og
/package02.CommonName.java/. 

Alle klasser i Java hører til en pakke, men når ingen blir spesifisert
blir default (global package) benyttet. Denne pakken har heller ikke
noe navn.

*** Opprette en pakke
For å oprette en pakke bruker vi følgende syntax:

#+BEGIN_SRC java
package MyPackage01;
#+END_SRC

Selve filene i pakken må da legges i en mappe med nøyaktig samme navn,
/\/MyPackage01\//. Man kan også ha et hierarki av pakker, f.eks. 

#+BEGIN_SRC java
package MyPackage01.MyPackage02...
#+END_SRC

Og vi definerer mappestrukturen deretter. Det kan være lurt å følge
Maven-mappestrukturen, da det er en godt organisert og veletablert
standard. 

For at Java skal finne pakkenne må de enten ligge i samme mappe som du
allerede jobber i, eller så kan man manuelt sett *CLASSPATH* som Java
leter etter.

*** Importering av pakker
Istedenfor å extende hver klasse i en pakke, for å kunne benytte
klassene kan man bruke /import/, med eller uten wildcard, slik:

#+BEGIN_SRC java
import Package.Class // Importerer spesifikk klasse.
import Package.* // Importerer alle klasser i pakken.
#+END_SRC

Hele Java API'et er definert i pakker og importeres på samme måte. Det
eneste er /java.lang/, som automatisk importeres, som blant annet
inneholder /System/-klassen og /println()/.
** Interfaces
Bruker interface på en klasse hvis vi ønsker egenskaper som flere
forskjellige klasser skal arve. Vi beskrivker kun ønsket oppførsel, og
ikke hvordan det skal gjøres. Metoder må skrives på nytt for hver
gang det implementeres. 

Et inteface defineres slik:

#+BEGIN_SRC java
access interface InterfaceName {
    returntype methodName(parameter);
    type varName = value;
}
#+END_SRC

Og implementeres med, 

#+BEGIN_SRC java
class ClassName implements InterfaceName{ }
#+END_SRC

Vi kan implementere så mange interfaces vi ønsker, og separerer dem
med komma.

*** Variabler i et interface

Variabler i et interface vil implisitt være /public/, /static/ og
/final/. Det gjør det veldig lett å dele variabler over flere klasser
i et program, ved å implementere dette interfacet.

*** Interfaces kan extende

Vi kan også la et interface extende et annet interface, og hvis en
klasse implementerer det ene interfacet, må den også implementere alle
metoder som er arvet fra det andre interfacet.

** Tilgangsnivåer
| *Modifier*    | *Class* | *Package* | *Subclass* | *World* |
| /public/      | Y       | Y         | Y          | Y       |
| /protected/   | Y       | Y         | Y          | N       |
| /no modifier/ | Y       | Y         | N          | N       |
| /private/     | Y       | N         | N          | N       |

Så for å kunne bruke /protected/ utenfor en pakke må det være en
subklasse av klassen, f.eks. /class Class01 extends Package01.Class02/.
** Abstract

Vi kan ha abstrakte metoder. Hvis en subklasse arver fra en
superklasse med en abstrakt metode, er den nødt til å implementere
denne metoden. Gjøres slik:

#+BEGIN_SRC java
abstract type methodName(parameter);
#+END_SRC

Klassen de abstrakte metodene ligger i må da også defineres som
abstrakte, slik:

#+BEGIN_SRC java
abstract class ClassName{ }
#+END_SRC

Det vil ikke være mulig å lage objekter av abstrakte klasser, men kun
av subklasser som extender og implementerer alle de abstrakte
metodene. 

Abstrakte klasser gjør at vi i objektorientert programmering kan lage
en mer virkelighetslik objektmodell.

*** Bruk av final

Hvis vi ønsker at en metode ikke skal kunne overskrives ved arv, kan
vi bruke *final* foran metoden. Det samme gjelder om vi ønsker en
klasse som ikke skal kunne arves, eller variabler vi ikke vil skal
kunne endres. 
* Generiske typer
Objektholdere som kan holde hva som helst, egner seg godt til å lage datastrukturer, siden strukturen blir ikke avhengig av noen spesiell type objekt å
kan derfor brukes på hva som helst. 

#+INCLUDE: "code/generics.java" src java

Over er et eksempel på en generisk LIFO-liste

*** Forklaring
**** class List
Her lager vi en klasse som vi sier at inneholder til den generiske typen E.
**** class Node
En intern klasse som ved å være intern overtar egenskapene til E

*** implementering av Comparable
#+INCLUDE: "code/comparable.java" src java
#+INCLUDE: "code/generics3.java" src java
* Subklasser og polyformi
** Arv
Vi kan arve fra en klasse i java, ved å bruke /extends/. Da vil
klassen som arver bli kalt /subklassen/ og klassen det arves fra bli
kalt /superklassen/.

Vi definerer først superklassen, som en vanlig klasse

#+BEGIN_SRC java
class ClassName {
    int someVar = 10;
}
#+END_SRC

Så kan vi la det som blir subklassen extende denne klassen, og arve
fra superklassen, slik:

#+BEGIN_SRC java
class SubClass extends Classname {
    System.out.print(someVar); // Vil printe ut 10, fra superklassen.
}
#+END_SRC

I Java kan man kun spesifisere en superklasse, men man kan godt ha et
hierarki av arv og subklasser.

Det som arv oftest benyttes til er å beskrive ett generelt objekt og
la subklasser utvide dette, så kan de igjen spesifisere de elementene
som gjør dem spesielle. F.eks. kan man tenke at man lager en
superklasse som definerer et /kjøretøy/, også har du subklasser som
utvider dette, f.eks. til /varebil/ og /personbil/.

** Tilgangskontroll og arv

Selv om du arver metoder og variabler fra en klasse, får du ikke
tilgang til elementer som er definert som *private*.

** Arv og konstruktører

Ved kjøring av en subklasse, vil både konstruktøren til subklassen og
til superklassen kjøre. Vi kan kalle på konstruktøren til superklassen
ved metoden *super(parameter)*.

Vi kan også bruke /super/ til å få tilgang til medlemmer av
superklassen, f.eks. /super.varName/ eller /super.methodName()/.

Konstruktøren til superklassen vil altid eksekveres først, også går
det nedover i hierarkiet. Kaller man på super() må dette gjøres øverst
i konstruktøren.
** Polymorfi
Vi kan overskrive metoder i subklassene. Java bestemmer hvilken av
metodene som kjøres, ved run-time, ved å se på hvilke objekter som
refereres til, selv om selve pekeren er av typen Superklasse. 
** Object-klassen
Java definerer en Object-klasse, som er en superklasse til alle
klasser. Det gjør at man kan ha en referansevariabel av typen Object
som kan referere til alle typer klasser.

Object definerer ett sett med metoder man kan benytte, blant annet
/Object clone()/, som kloner objektet til et nytt, selvstendig objekt.
* Unntak (Exceptions)
** Hva er unntak
Et unntak skjer når noe går galt, for eksempel å bruke en metode i et objekt
som er null(nullPointerException). Eller prøver å få tak i en verdi i et array
som er utenfor arrayets størelse (IndexOutOfBoundsException).
** Fange unntak
Å fange unntak er lett

#+BEGIN_SRC java
try { 
    noe();
} catch (Exception e) {
    gjørDetSomSkalSkjeHvisNoeGårGalt();
}
#+END_SRC

Man kan også bruke exceptions som en sofistikert if. Hvis man vet at koden funker, men at det
skal skje noe på et visst punkt eller etter en viss tid, kan man bruke exceptions til å
behandle unntaket når det kommer, eller bare gå videre i koden.

#+BEGIN_SRC java
try { 
    while(noe()) { kodeSkjer(); }
} catch (Exception e) {
    løkkaErFerdigFordiNoeKultSkjedde();
}
#+END_SRC

** Definer eget unntak
Vi kan definere våres egene unntak, hvis vi ikke finner et passende
unntak i Java sin /Exception/-klasse. Det gjøres slik:

#+BEGIN_SRC java
class EgendefinertException extends Exception {}
#+END_SRC

Vi kan så la en klasse eller en metode bruke dette, slik:

#+BEGIN_SRC java
void myMethod() throws EgendefinertException {
    if(a != true) {
        throw new EgendefinertException();
    }
}
#+END_SRC

Unntaket må så kastes vidre til main, eller fanges og behandles. 

* Finalize, garbagecollector etc
finalize() er en metode du kan definere i klasser, som automatisk
kjøres før objekter blir tatt av garbage collectoren og
slettes. F.eks. hvis du skal dobbeltsjekke at en fil har blitt lukket.

* Tråder (Threads)
** Oprettelse av en tråd
Kan implemenere /Runnable/ eller extende /Thread/ classs.
Tråder er små prosesser inne i én prosess. Det er raskerkere å 
skifte fra en tråd til en annen enn fra en prosess til en annen.
Å bruke flere prosesser/tråder for å løse en oppgave kalles
paralellprogrammering.

For å oprette en tråd gjør vi følgende:

#+BEGIN_SRC java
MyThreadClass myThreadClass = new MyThreadClass();
Thread newThread = new Thread(myThreadClass);
newThread.start(); // Kaller på run()-metoden.
#+END_SRC

** Nyttige metoder

Hvis vi lurer på om en tråd er fullført eller ikke kan vi kalle på
metoden /isAlive()/, som vil returnere en boolean.

En annen måte å vente/få beskjed når en tråd er fullført er å bruke
metoden /join()/. Det gjøres på følgende måte:

#+BEGIN_SRC java
myClass.myThread.join();
#+END_SRC

Vi kan også sette *prioriteten* til en tråd ved å kalle metoden
/setPriority(int level);/. Prioritetsnivået er et tall mellom 1
og 10. 

** Synkronisering

Vi kan enkelt synkronisere metoder, hvis vi ikke ønsker at flere
tråder skal kunne jobbe på de samme variablene, eller metodene, ved å
legge til nøkkelordet /synchronized/. Den putter på en lås på metoden,
som sier at kun en tråd kan jobbe på metoden av gangen, og andre
tråder må vente.

Vi kan også synkronisere en blokk av kode, ved følgende statement:

#+BEGIN_SRC java
synchronized(object) { 
    // Kode til å synkronisere.
}
#+END_SRC

** Kommunikasjon mellom tråder

Hvis vi har flere tråder som skal jobbe etterhverandre på et
synkronisert objekt, men det ene objektet er avhengig av at den andre
tråden har fullført en prosedyre, kan vi benytte oss av /wait()/ og
/notify()/-metoden. 

*** wait()

Gjør at tråden sovner, og låser opp låsen på det synkroniserte
objektet. Kan kaste /InterruptedException/.
*** notify()

notify() vekker den andre sovende tråden, hvis den blir kalt inne i
det samme, synkroniserte objektet.

*** notifyAll()

notifyAll() gjør det samme som notify(), men den vekker alle sovende tråder.

** Eksempel på en enkel tråd

#+INCLUDE: "code/tradeksempel.java" src java

Nøkkelordet /volatile/ brukes til å indikere at en variabel skal
endres av flere enn en tråd.

* Brukergrensesnitt

#+BEGIN_SRC java
import javax.swing.*; 
import java.awt.*;

class RammeDemo2 extends JFrame { 
    RammeDemo2() {
        // En annen måte å sette tittel på rammen:
        super("Første vindu");                     
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300,200);        
        setVisible(true);
    } 
    public static void main(String[] args) {
        new RammeDemo2();
    }
}
#+END_SRC

Anonym klasse, når klassen ikke har navn, og er skrevet som parameter
til en metode.

Bruk /repaint()/-metoden for å tegne vindu på nytt..
* Shorthands
** iterere over en hel collection
#+BEGIN_SRC java
for(Object o: Collection c){
//Do something with the object
}
#+END_SRC
** If-shorthand

#+BEGIN_SRC java
if (condition) {
    return x;
}
return y;
#+END_SRC

Burde isteden skrives slik:

#+BEGIN_SRC java
return (condition ? x : y);
#+END_SRC



* Prinsipper for større programmer
-KISS
  - Moduler
    - Små
      - Definert av grensesnitt
      - Kun en funksjonalitet
        - F.eks. LinkedList
  - Dokumentasjon
  - Testing
  - Versjonkontroll
  - Konvensjoner
    - Hvordan kode ser ut
    - Hvordan kode struktureres

Ved over ca 40 linjer i en metode, på tide å splitte.

